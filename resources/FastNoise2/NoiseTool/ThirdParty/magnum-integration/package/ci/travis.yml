addons:
  apt:
    packages:
    - libgl1-mesa-dev
    - g++-4.8
    - ninja-build
    - lcov
    # Needed for some snippets
    - libsdl2-dev
    - libbullet-dev
    - libeigen3-dev
    - libglm-dev

matrix:
  include:
  #- language: cpp
    #os: linux
    #dist: xenial
    #compiler: gcc
    #env:
    #- JOBID=linux-gl
    #- TARGET=desktop
    #- CMAKE_CXX_FLAGS="--coverage"
    #- LCOV_EXTRA_OPTS="--gcov-tool /usr/bin/gcov-4.8"
    #- CONFIGURATION=Debug
  #- language: cpp
    #os: linux
    #dist: xenial
    #compiler: gcc
    #env:
    #- JOBID=linux-nondeprecated
    #- TARGET=desktop
    #- BUILD_DEPRECATED=OFF
    #- CMAKE_CXX_FLAGS="-DCORRADE_NO_ASSERT"
    #- CONFIGURATION=Release
  #- language: cpp
    #os: linux
    #dist: xenial
    #compiler: clang
    #env:
    #- JOBID=linux-sanitizers
    #- TARGET=desktop-sanitizers
    #- CMAKE_CXX_FLAGS=-fsanitize=address
    #- CONFIGURATION=Debug
    #addons:
      #apt:
        #sources:
        #- llvm-toolchain-xenial
        #packages:
        #- libgl1-mesa-dev
        #- clang-3.8
        #- ninja-build
        ## Needed for some snippets
        #- libsdl2-dev
        #- libbullet-dev
        #- libeigen3-dev
        #- libglm-dev
  #- language: cpp
    #os: linux
    #dist: xenial
    #compiler: gcc
    #env:
    #- JOBID=linux-gles2
    #- TARGET=desktop-gles
    #- TARGET_GLES2=ON
    #- CMAKE_CXX_FLAGS="--coverage"
    #- LCOV_EXTRA_OPTS="--gcov-tool /usr/bin/gcov-4.8"
  #- language: cpp
    #os: linux
    #dist: xenial
    #compiler: gcc
    #env:
    #- JOBID=linux-gles3
    #- TARGET=desktop-gles
    #- TARGET_GLES2=OFF
    #- CMAKE_CXX_FLAGS="--coverage"
    #- LCOV_EXTRA_OPTS="--gcov-tool /usr/bin/gcov-4.8"
  #- language: cpp
    #os: osx
    #compiler: clang
    #env:
    #- JOBID=macos-gl
    #- TARGET=desktop
    #- CMAKE_CXX_FLAGS="--coverage"
    #- CONFIGURATION=Debug
  - language: cpp
    os: osx
    osx_image: xcode7.3
    env:
    - JOBID=ios-gles2
    - TARGET=ios-simulator
    - TARGET_GLES2=ON
  - language: cpp
    os: osx
    osx_image: xcode7.3
    env:
    - JOBID=ios-gles3
    - TARGET=ios-simulator
    - TARGET_GLES2=OFF
  #- language: cpp
    #os: osx
    #osx_image: xcode9.3
    #env:
    #- JOBID=emscripten-webgl1
    #- TARGET=emscripten
    #- TARGET_GLES2=ON
  #- language: cpp
    #os: osx
    #osx_image: xcode9.3
    #env:
    #- JOBID=emscripten-webgl2
    #- TARGET=emscripten
    #- TARGET_GLES2=OFF
  - language: android
    os: linux
    # Setting xenial here will cause it to use 12.04, with GCC 4.6 and other
    # prehistoric nightmares. So staying with 14.04 for the time being.
    dist: trusty
    env:
    - JOBID=android-gles2
    - TARGET=android
    - TARGET_GLES2=ON
    addons:
      apt:
        packages:
        - ninja-build
        - libeigen3-dev
    android:
      components:
      - build-tools-22.0.1
      - android-22
      - sys-img-armeabi-v7a-android-22
  - language: android
    os: linux
    # Setting xenial here will cause it to use 12.04, with GCC 4.6 and other
    # prehistoric nightmares. So staying with 14.04 for the time being.
    dist: trusty
    env:
    - JOBID=android-gles3
    - TARGET=android
    - TARGET_GLES2=OFF
    addons:
      apt:
        packages:
        - ninja-build
        - libeigen3-dev
    android:
      components:
      - build-tools-22.0.1
      - android-22
      - sys-img-armeabi-v7a-android-22

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/00ec7a9066bb0fec98f3
    on_success: change
    on_failure: always
    on_start: never

cache:
  directories:
  - $HOME/cmake
  - $HOME/eigen
  - $HOME/glm
  - $HOME/swiftshader
  - $HOME/imgui

install:
- if [ "$TARGET_GLES2" == "ON" ]; then export TARGET_GLES3=OFF; fi
- if [ "$TARGET_GLES2" == "OFF" ]; then export TARGET_GLES3=ON; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ]; then export WITH_DART=ON; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ]; then export WITH_DART=OFF; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ ! "$TARGET" == "desktop-sanitizers" ] && [ ! "$TARGET" == "android" ]; then export CXX=g++-4.8; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "desktop-sanitizers" ]; then export CXX=clang++-3.8; fi
- if [ "$BUILD_DEPRECATED" != "OFF" ]; then export BUILD_DEPRECATED=ON; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ]; then export PLATFORM_GL_API=GLX; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "android" ]; then wget -nc https://dl.google.com/android/repository/android-ndk-r16b-linux-x86_64.zip && unzip -q android-*.zip; fi
# Download CMake 3.4.3 to ensure we're still compatible with it (Travis has
# 3.9 since December 2017). Also, the PATH setting can't be cached, so it's
# separate (bit me two times already). Android needs CMake 3.7, but
# https://gitlab.kitware.com/cmake/cmake/issues/17253 is fixed in 3.9.2, so
# grab that.
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ ! "$TARGET" == "android" ] && [ ! -e "$HOME/cmake/bin" ]; then cd $HOME ; wget -nc --no-check-certificate https://cmake.org/files/v3.4/cmake-3.4.3-Linux-x86_64.tar.gz && mkdir -p cmake && cd cmake && tar --strip-components=1 -xzf ../cmake-3.4.3-Linux-x86_64.tar.gz && cd $TRAVIS_BUILD_DIR ; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "android" ] && [ ! -e "$HOME/cmake/bin" ]; then cd $HOME ; wget -nc --no-check-certificate https://cmake.org/files/v3.9/cmake-3.9.2-Linux-x86_64.tar.gz && mkdir -p cmake && cd cmake && tar --strip-components=1 -xzf ../cmake-3.9.2-Linux-x86_64.tar.gz && cd $TRAVIS_BUILD_DIR ; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ]; then export PATH=$HOME/cmake/bin:$PATH && cmake --version; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install lcov; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "desktop" ]; then export PLATFORM_GL_API=CGL; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "ios-simulator" ]; then gem install xcpretty; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "emscripten" ]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install emscripten && export LLVM=/usr/local/opt/emscripten/libexec/llvm/bin && emcc; fi

# SDL2, Bullet, Eigen, GLM & DART for native builds
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "desktop" ]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install sdl2 bullet eigen glm dartsim; fi

# SDL for non-native builds
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "ios-simulator" ]; then curl -O https://www.libsdl.org/release/SDL2-2.0.4.tar.gz && tar -xzvf SDL2-2.0.4.tar.gz && cd SDL2-2.0.4/Xcode-iOS/SDL && xcodebuild -sdk iphonesimulator9.3 | xcpretty && mkdir -p ../../../sdl2/lib && cp build/Release-iphonesimulator/libSDL2.a ../../../sdl2/lib && mkdir -p ../../../sdl2/include/SDL2 && cp -R ../../include/* ../../../sdl2/include/SDL2 && cd ../../..; fi

# GLM and Eigen for non-native builds. Put into a separate folder so it can be
# used without including the global native system dir.
- if ( [ "$TARGET" == "android" ] || [ "$TARGET" == "ios-simulator" ] || [ "$TARGET" == "emscripten" ] ) && [ ! -e "$HOME/glm/detail" ]; then cd $HOME ; wget -nc --no-check-certificate https://github.com/g-truc/glm/archive/0.9.9.0.tar.gz && mkdir -p glm && cd glm && tar --strip-components=1 -xzf ../0.9.9.0.tar.gz && cd $TRAVIS_BUILD_DIR ; fi
- if ( [ "$TARGET" == "android" ] || [ "$TARGET" == "ios-simulator" ] || [ "$TARGET" == "emscripten" ] ) && [ ! -e "$HOME/eigen/Eigen" ]; then cd $HOME ; wget -nc --no-check-certificate https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz && mkdir -p eigen && cd eigen && tar --strip-components=1 -xzf ../eigen-3.3.7.tar.gz && cd $TRAVIS_BUILD_DIR ; fi

# DART and its dependencies. Temporarily disabled on Linux because of GCC 4 and
# 5 ABI mismatch on 16.04, https://github.com/dartsim/dart/issues/967#issuecomment-469075835
#- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ ! "$TARGET" == "android" ]; then ./package/ci/travis-dependencies.sh; fi

# ImGui
- if [ ! -e "$HOME/imgui/imgui.h" ]; then cd $HOME ; wget -nc --no-check-certificate -O imgui.tar.gz https://github.com/ocornut/imgui/archive/v1.72.tar.gz && mkdir -p imgui && cd imgui && tar --strip-components=1 -xzf ../imgui.tar.gz && cd $TRAVIS_BUILD_DIR; fi

# SwiftShader on Linux (cached). Taken from Chromium snapshot 587878
# (swiftshader-bin Arch package).
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "desktop-gles" ] && [ ! -e "$HOME/swiftshader/libEGL.so" ]; then cd $HOME ; wget https://ci.magnum.graphics/swiftshader-chromium-587878.tar.gz && mkdir -p swiftshader && cd swiftshader && tar -xzf ../swiftshader-chromium-587878.tar.gz && cd $TRAVIS_BUILD_DIR ; fi

script:
- if [ "$TRAVIS_OS_NAME" == "linux" ] && ( [ "$TARGET" == "desktop" ] || [ "$TARGET" == "desktop-sanitizers" ] ); then ./package/ci/unix-desktop.sh; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "desktop-gles" ]; then ./package/ci/unix-desktop-gles.sh; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "android" ]; then ./package/ci/travis-android-arm.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "desktop" ]; then ./package/ci/unix-desktop.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "ios-simulator" ]; then ./package/ci/travis-ios-simulator.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "emscripten" ]; then ./package/ci/emscripten.sh; fi
# Travis somehow is not able to gather all output, try to force it using this
- sync

after_success:
# Keep in sync with appveyor-lcov.sh, circleci.yml and PKBUILD-coverage, please
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --directory . --capture --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --extract coverage.info "*/src/Magnum*/*" --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --remove coverage.info "*/Test/*" --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --remove coverage.info "*/build/src/*" --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then bash <(curl -s https://codecov.io/bash) -f coverage.info; fi
